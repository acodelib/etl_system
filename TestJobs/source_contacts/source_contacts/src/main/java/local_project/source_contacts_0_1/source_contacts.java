// ============================================================================
//
// Copyright (c) 2006-2015, Talend Inc.
//
// This source code has been automatically generated by_Talend Open Studio for Big Data
// / Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
// http://www.apache.org/licenses/LICENSE-2.0
// 
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


package local_project.source_contacts_0_1;

import routines.DataOperation;
import routines.TalendDataGenerator;
import routines.FileUtils;
import routines.Relational;
import routines.Mathematical;
import routines.Numeric;
import routines.CSVUtils;
import routines.RobustHttpRequest;
import routines.TalendStringUtil;
import routines.TalendString;
import routines.StringUtils;
import routines.StringHandling;
import routines.NumericUtils;
import routines.TalendDate;
import routines.JobUtils;
import routines.system.*;
import routines.system.api.*;
import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.math.BigDecimal;
import java.io.ByteArrayOutputStream;
import java.io.ByteArrayInputStream;
import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.io.ObjectOutputStream;
import java.io.ObjectInputStream;
import java.io.IOException;
import java.util.Comparator;
 




	//the import part of tJavaRow_1
	//import java.util.List;

	//the import part of tJava_1
	//import java.util.List;


@SuppressWarnings("unused")

/**
 * Job: source_contacts Purpose: <br>
 * Description:  <br>
 * @author user@talend.com
 * @version 6.5.1.20180116_1512
 * @status 
 */
public class source_contacts implements TalendJob {



	public final Object obj = new Object();

	// for transmiting parameters purpose
	private Object valueObject = null;

	public Object getValueObject() {
		return this.valueObject;
	}

	public void setValueObject(Object valueObject) {
		this.valueObject = valueObject;
	}
	
	private final static String defaultCharset = java.nio.charset.Charset.defaultCharset().name();

	
	private final static String utf8Charset = "UTF-8";
	//contains type for every context property
	public class PropertiesWithType extends java.util.Properties {
		private static final long serialVersionUID = 1L;
		private java.util.Map<String,String> propertyTypes = new java.util.HashMap<>();
		
		public PropertiesWithType(java.util.Properties properties){
			super(properties);
		}
		public PropertiesWithType(){
			super();
		}
		
		public void setContextType(String key, String type) {
			propertyTypes.put(key,type);
		}
	
		public String getContextType(String key) {
			return propertyTypes.get(key);
		}
	}
	
	// create and load default properties
	private java.util.Properties defaultProps = new java.util.Properties();
	// create application properties with default
	public class ContextProperties extends PropertiesWithType {

		private static final long serialVersionUID = 1L;

		public ContextProperties(java.util.Properties properties){
			super(properties);
		}
		public ContextProperties(){
			super();
		}

		public void synchronizeContext(){
			
			if(target_job != null){
				
					this.setProperty("target_job", target_job.toString());
				
			}
			
			if(this_checkpoint != null){
				
					this.setProperty("this_checkpoint", this_checkpoint.toString());
				
			}
			
			if(job_schedule_type != null){
				
					this.setProperty("job_schedule_type", job_schedule_type.toString());
				
			}
			
		}

public String target_job;
public String getTarget_job(){
	return this.target_job;
}
public String this_checkpoint;
public String getThis_checkpoint(){
	return this.this_checkpoint;
}
public String job_schedule_type;
public String getJob_schedule_type(){
	return this.job_schedule_type;
}
	}
	private ContextProperties context = new ContextProperties();
	public ContextProperties getContext() {
		return this.context;
	}
	private final String jobVersion = "0.1";
	private final String jobName = "source_contacts";
	private final String projectName = "LOCAL_PROJECT";
	public Integer errorCode = null;
	private String currentComponent = "";
	
		private final java.util.Map<String, Object> globalMap = new java.util.HashMap<String, Object>();
        private final static java.util.Map<String, Object> junitGlobalMap = new java.util.HashMap<String, Object>();
	
		private final java.util.Map<String, Long> start_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Long> end_Hash = new java.util.HashMap<String, Long>();
		private final java.util.Map<String, Boolean> ok_Hash = new java.util.HashMap<String, Boolean>();
		public  final java.util.List<String[]> globalBuffer = new java.util.ArrayList<String[]>();
	

private RunStat runStat = new RunStat();

	// OSGi DataSource
	private final static String KEY_DB_DATASOURCES = "KEY_DB_DATASOURCES";

	public void setDataSources(java.util.Map<String, javax.sql.DataSource> dataSources) {
		java.util.Map<String, routines.system.TalendDataSource> talendDataSources = new java.util.HashMap<String, routines.system.TalendDataSource>();
		for (java.util.Map.Entry<String, javax.sql.DataSource> dataSourceEntry : dataSources.entrySet()) {
			talendDataSources.put(dataSourceEntry.getKey(), new routines.system.TalendDataSource(dataSourceEntry.getValue()));
		}
		globalMap.put(KEY_DB_DATASOURCES, talendDataSources);
	}


private final java.io.ByteArrayOutputStream baos = new java.io.ByteArrayOutputStream();
private final java.io.PrintStream errorMessagePS = new java.io.PrintStream(new java.io.BufferedOutputStream(baos));

public String getExceptionStackTrace() {
	if ("failure".equals(this.getStatus())) {
		errorMessagePS.flush();
		return baos.toString();
	}
	return null;
}

private Exception exception;

public Exception getException() {
	if ("failure".equals(this.getStatus())) {
		return this.exception;
	}
	return null;
}

private class TalendException extends Exception {

	private static final long serialVersionUID = 1L;

	private java.util.Map<String, Object> globalMap = null;
	private Exception e = null;
	private String currentComponent = null;
	private String virtualComponentName = null;
	
	public void setVirtualComponentName (String virtualComponentName){
		this.virtualComponentName = virtualComponentName;
	}

	private TalendException(Exception e, String errorComponent, final java.util.Map<String, Object> globalMap) {
		this.currentComponent= errorComponent;
		this.globalMap = globalMap;
		this.e = e;
	}

	public Exception getException() {
		return this.e;
	}

	public String getCurrentComponent() {
		return this.currentComponent;
	}

	
    public String getExceptionCauseMessage(Exception e){
        Throwable cause = e;
        String message = null;
        int i = 10;
        while (null != cause && 0 < i--) {
            message = cause.getMessage();
            if (null == message) {
                cause = cause.getCause();
            } else {
                break;          
            }
        }
        if (null == message) {
            message = e.getClass().getName();
        }   
        return message;
    }

	@Override
	public void printStackTrace() {
		if (!(e instanceof TalendException || e instanceof TDieException)) {
			if(virtualComponentName!=null && currentComponent.indexOf(virtualComponentName+"_")==0){
				globalMap.put(virtualComponentName+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			}
			globalMap.put(currentComponent+"_ERROR_MESSAGE",getExceptionCauseMessage(e));
			System.err.println("Exception in component " + currentComponent + " (" + jobName + ")");
		}
		if (!(e instanceof TDieException)) {
			if(e instanceof TalendException){
				e.printStackTrace();
			} else {
				e.printStackTrace();
				e.printStackTrace(errorMessagePS);
				source_contacts.this.exception = e;
			}
		}
		if (!(e instanceof TalendException)) {
		try {
			for (java.lang.reflect.Method m : this.getClass().getEnclosingClass().getMethods()) {
				if (m.getName().compareTo(currentComponent + "_error") == 0) {
					m.invoke(source_contacts.this, new Object[] { e , currentComponent, globalMap});
					break;
				}
			}

			if(!(e instanceof TDieException)){
			}
		} catch (Exception e) {
			this.e.printStackTrace();
		}
		}
	}
}

			public void tMSSqlConnection_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlConnection_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlInput_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJavaRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tLogRow_2_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlRow_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlInput_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlClose_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tMSSqlClose_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tJava_1_error(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {
				
				end_Hash.put(errorComponent, System.currentTimeMillis());
				
				status = "failure";
				
					tJava_1_onSubJobError(exception, errorComponent, globalMap);
			}
			
			public void tMSSqlConnection_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlInput_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tMSSqlClose_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
			public void tJava_1_onSubJobError(Exception exception, String errorComponent, final java.util.Map<String, Object> globalMap) throws TalendException {

resumeUtil.addLog("SYSTEM_LOG", "NODE:"+ errorComponent, "", Thread.currentThread().getId()+ "", "FATAL", "", exception.getMessage(), ResumeUtil.getExceptionStackTrace(exception),"");

			}
		





public void tMSSqlConnection_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlConnection_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlConnection_1", false);
		start_Hash.put("tMSSqlConnection_1", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlConnection_1";

	
		int tos_count_tMSSqlConnection_1 = 0;
		
    	class BytesLimit65535_tMSSqlConnection_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMSSqlConnection_1().limitLog4jByte();
	

			    
		    String url_tMSSqlConnection_1 = "jdbc:sqlserver://" + "DESKTOP-RP8MCB6" ;
		String port_tMSSqlConnection_1 = "1433";
		String dbname_tMSSqlConnection_1 = "ETL_System" ;
    	if (!"".equals(port_tMSSqlConnection_1)) {
    		url_tMSSqlConnection_1 += ":" + "1433";
    	}
    	if (!"".equals(dbname_tMSSqlConnection_1)) {
    				    
		    	url_tMSSqlConnection_1 += ";databaseName=" + "ETL_System"; 
    	}
		url_tMSSqlConnection_1 += ";appName=" + projectName + ";" + "";  

	String dbUser_tMSSqlConnection_1 = "sa";
	
	
		 
	final String decryptedPassword_tMSSqlConnection_1 = routines.system.PasswordEncryptUtil.decryptPassword("9553ac7381197dddf4f7aba1746784ea");
		String dbPwd_tMSSqlConnection_1 = decryptedPassword_tMSSqlConnection_1;
	

	java.sql.Connection conn_tMSSqlConnection_1 = null;
	
		
			String driverClass_tMSSqlConnection_1 = "com.microsoft.sqlserver.jdbc.SQLServerDriver";
			java.lang.Class.forName(driverClass_tMSSqlConnection_1);
		
		conn_tMSSqlConnection_1 = java.sql.DriverManager.getConnection(url_tMSSqlConnection_1,dbUser_tMSSqlConnection_1,dbPwd_tMSSqlConnection_1);

		globalMap.put("conn_tMSSqlConnection_1", conn_tMSSqlConnection_1);
	if (null != conn_tMSSqlConnection_1) {
		
			conn_tMSSqlConnection_1.setAutoCommit(true);
	}

	globalMap.put("dbschema_tMSSqlConnection_1", "dbo");

	globalMap.put("db_tMSSqlConnection_1",  "ETL_System");

	globalMap.put("conn_tMSSqlConnection_1",conn_tMSSqlConnection_1);
	
	globalMap.put("shareIdentitySetting_tMSSqlConnection_1",  false);

 



/**
 * [tMSSqlConnection_1 begin ] stop
 */
	
	/**
	 * [tMSSqlConnection_1 main ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_1";

	

 


	tos_count_tMSSqlConnection_1++;

/**
 * [tMSSqlConnection_1 main ] stop
 */
	
	/**
	 * [tMSSqlConnection_1 end ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_1";

	

 

ok_Hash.put("tMSSqlConnection_1", true);
end_Hash.put("tMSSqlConnection_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk1", 0, "ok");
				}
				tMSSqlInput_1Process(globalMap);



/**
 * [tMSSqlConnection_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlConnection_1 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlConnection_1";

	

 



/**
 * [tMSSqlConnection_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", 1);
	}
	


public static class row4Struct implements routines.system.IPersistableRow<row4Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_source_contacts = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_source_contacts = new byte[0];

	
			    public String job_name;

				public String getJob_name () {
					return this.job_name;
				}
				
			    public Long data_checkpoint;

				public Long getData_checkpoint () {
					return this.data_checkpoint;
				}
				
			    public java.util.Date time_checkpoint;

				public java.util.Date getTime_checkpoint () {
					return this.time_checkpoint;
				}
				
			    public Long next_data_checkpoint;

				public Long getNext_data_checkpoint () {
					return this.next_data_checkpoint;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_source_contacts.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_source_contacts.length == 0) {
   					commonByteArray_LOCAL_PROJECT_source_contacts = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_source_contacts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_source_contacts, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_source_contacts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_source_contacts) {

        	try {

        		int length = 0;
		
					this.job_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.data_checkpoint = null;
           				} else {
           			    	this.data_checkpoint = dis.readLong();
           				}
					
					this.time_checkpoint = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.next_data_checkpoint = null;
           				} else {
           			    	this.next_data_checkpoint = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job_name,dos);
					
					// Long
				
						if(this.data_checkpoint == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.data_checkpoint);
		            	}
					
					// java.util.Date
				
						writeDate(this.time_checkpoint,dos);
					
					// Long
				
						if(this.next_data_checkpoint == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.next_data_checkpoint);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_name="+job_name);
		sb.append(",data_checkpoint="+String.valueOf(data_checkpoint));
		sb.append(",time_checkpoint="+String.valueOf(time_checkpoint));
		sb.append(",next_data_checkpoint="+String.valueOf(next_data_checkpoint));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row4Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row2Struct implements routines.system.IPersistableRow<row2Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_source_contacts = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_source_contacts = new byte[0];

	
			    public String job_name;

				public String getJob_name () {
					return this.job_name;
				}
				
			    public Long data_checkpoint;

				public Long getData_checkpoint () {
					return this.data_checkpoint;
				}
				
			    public java.util.Date time_checkpoint;

				public java.util.Date getTime_checkpoint () {
					return this.time_checkpoint;
				}
				
			    public Long next_data_checkpoint;

				public Long getNext_data_checkpoint () {
					return this.next_data_checkpoint;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_source_contacts.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_source_contacts.length == 0) {
   					commonByteArray_LOCAL_PROJECT_source_contacts = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_source_contacts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_source_contacts, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_source_contacts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_source_contacts) {

        	try {

        		int length = 0;
		
					this.job_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.data_checkpoint = null;
           				} else {
           			    	this.data_checkpoint = dis.readLong();
           				}
					
					this.time_checkpoint = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.next_data_checkpoint = null;
           				} else {
           			    	this.next_data_checkpoint = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job_name,dos);
					
					// Long
				
						if(this.data_checkpoint == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.data_checkpoint);
		            	}
					
					// java.util.Date
				
						writeDate(this.time_checkpoint,dos);
					
					// Long
				
						if(this.next_data_checkpoint == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.next_data_checkpoint);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_name="+job_name);
		sb.append(",data_checkpoint="+String.valueOf(data_checkpoint));
		sb.append(",time_checkpoint="+String.valueOf(time_checkpoint));
		sb.append(",next_data_checkpoint="+String.valueOf(next_data_checkpoint));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row2Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row3Struct implements routines.system.IPersistableRow<row3Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_source_contacts = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_source_contacts = new byte[0];

	
			    public String job_name;

				public String getJob_name () {
					return this.job_name;
				}
				
			    public Long data_checkpoint;

				public Long getData_checkpoint () {
					return this.data_checkpoint;
				}
				
			    public java.util.Date time_checkpoint;

				public java.util.Date getTime_checkpoint () {
					return this.time_checkpoint;
				}
				
			    public Long next_data_checkpoint;

				public Long getNext_data_checkpoint () {
					return this.next_data_checkpoint;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_source_contacts.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_source_contacts.length == 0) {
   					commonByteArray_LOCAL_PROJECT_source_contacts = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_source_contacts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_source_contacts, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_source_contacts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_source_contacts) {

        	try {

        		int length = 0;
		
					this.job_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.data_checkpoint = null;
           				} else {
           			    	this.data_checkpoint = dis.readLong();
           				}
					
					this.time_checkpoint = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.next_data_checkpoint = null;
           				} else {
           			    	this.next_data_checkpoint = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job_name,dos);
					
					// Long
				
						if(this.data_checkpoint == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.data_checkpoint);
		            	}
					
					// java.util.Date
				
						writeDate(this.time_checkpoint,dos);
					
					// Long
				
						if(this.next_data_checkpoint == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.next_data_checkpoint);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_name="+job_name);
		sb.append(",data_checkpoint="+String.valueOf(data_checkpoint));
		sb.append(",time_checkpoint="+String.valueOf(time_checkpoint));
		sb.append(",next_data_checkpoint="+String.valueOf(next_data_checkpoint));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row3Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}

public static class row1Struct implements routines.system.IPersistableRow<row1Struct> {
    final static byte[] commonByteArrayLock_LOCAL_PROJECT_source_contacts = new byte[0];
    static byte[] commonByteArray_LOCAL_PROJECT_source_contacts = new byte[0];

	
			    public String job_name;

				public String getJob_name () {
					return this.job_name;
				}
				
			    public Long data_checkpoint;

				public Long getData_checkpoint () {
					return this.data_checkpoint;
				}
				
			    public java.util.Date time_checkpoint;

				public java.util.Date getTime_checkpoint () {
					return this.time_checkpoint;
				}
				
			    public Long next_data_checkpoint;

				public Long getNext_data_checkpoint () {
					return this.next_data_checkpoint;
				}
				



	private String readString(ObjectInputStream dis) throws IOException{
		String strReturn = null;
		int length = 0;
        length = dis.readInt();
		if (length == -1) {
			strReturn = null;
		} else {
			if(length > commonByteArray_LOCAL_PROJECT_source_contacts.length) {
				if(length < 1024 && commonByteArray_LOCAL_PROJECT_source_contacts.length == 0) {
   					commonByteArray_LOCAL_PROJECT_source_contacts = new byte[1024];
				} else {
   					commonByteArray_LOCAL_PROJECT_source_contacts = new byte[2 * length];
   				}
			}
			dis.readFully(commonByteArray_LOCAL_PROJECT_source_contacts, 0, length);
			strReturn = new String(commonByteArray_LOCAL_PROJECT_source_contacts, 0, length, utf8Charset);
		}
		return strReturn;
	}

    private void writeString(String str, ObjectOutputStream dos) throws IOException{
		if(str == null) {
            dos.writeInt(-1);
		} else {
            byte[] byteArray = str.getBytes(utf8Charset);
	    	dos.writeInt(byteArray.length);
			dos.write(byteArray);
    	}
    }

	private java.util.Date readDate(ObjectInputStream dis) throws IOException{
		java.util.Date dateReturn = null;
        int length = 0;
        length = dis.readByte();
		if (length == -1) {
			dateReturn = null;
		} else {
	    	dateReturn = new Date(dis.readLong());
		}
		return dateReturn;
	}

    private void writeDate(java.util.Date date1, ObjectOutputStream dos) throws IOException{
		if(date1 == null) {
            dos.writeByte(-1);
		} else {
			dos.writeByte(0);
	    	dos.writeLong(date1.getTime());
    	}
    }

    public void readData(ObjectInputStream dis) {

		synchronized(commonByteArrayLock_LOCAL_PROJECT_source_contacts) {

        	try {

        		int length = 0;
		
					this.job_name = readString(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.data_checkpoint = null;
           				} else {
           			    	this.data_checkpoint = dis.readLong();
           				}
					
					this.time_checkpoint = readDate(dis);
					
			            length = dis.readByte();
           				if (length == -1) {
           	    			this.next_data_checkpoint = null;
           				} else {
           			    	this.next_data_checkpoint = dis.readLong();
           				}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);

		

        }

		

      }


    }

    public void writeData(ObjectOutputStream dos) {
        try {

		
					// String
				
						writeString(this.job_name,dos);
					
					// Long
				
						if(this.data_checkpoint == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.data_checkpoint);
		            	}
					
					// java.util.Date
				
						writeDate(this.time_checkpoint,dos);
					
					// Long
				
						if(this.next_data_checkpoint == null) {
			                dos.writeByte(-1);
						} else {
               				dos.writeByte(0);
           			    	dos.writeLong(this.next_data_checkpoint);
		            	}
					
        	} catch (IOException e) {
	            throw new RuntimeException(e);
        }


    }


    public String toString() {

		StringBuilder sb = new StringBuilder();
		sb.append(super.toString());
		sb.append("[");
		sb.append("job_name="+job_name);
		sb.append(",data_checkpoint="+String.valueOf(data_checkpoint));
		sb.append(",time_checkpoint="+String.valueOf(time_checkpoint));
		sb.append(",next_data_checkpoint="+String.valueOf(next_data_checkpoint));
	    sb.append("]");

	    return sb.toString();
    }

    /**
     * Compare keys
     */
    public int compareTo(row1Struct other) {

		int returnValue = -1;
		
	    return returnValue;
    }


    private int checkNullsAndCompare(Object object1, Object object2) {
        int returnValue = 0;
		if (object1 instanceof Comparable && object2 instanceof Comparable) {
            returnValue = ((Comparable) object1).compareTo(object2);
        } else if (object1 != null && object2 != null) {
            returnValue = compareStrings(object1.toString(), object2.toString());
        } else if (object1 == null && object2 != null) {
            returnValue = 1;
        } else if (object1 != null && object2 == null) {
            returnValue = -1;
        } else {
            returnValue = 0;
        }

        return returnValue;
    }

    private int compareStrings(String string1, String string2) {
        return string1.compareTo(string2);
    }


}
public void tMSSqlInput_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		row1Struct row1 = new row1Struct();
row1Struct row3 = row1;
row2Struct row2 = new row2Struct();
row2Struct row4 = row2;







	
	/**
	 * [tMSSqlRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlRow_1", false);
		start_Hash.put("tMSSqlRow_1", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row4" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tMSSqlRow_1 = 0;
		
    	class BytesLimit65535_tMSSqlRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMSSqlRow_1().limitLog4jByte();

	java.sql.Connection conn_tMSSqlRow_1 = null;
	String query_tMSSqlRow_1 = "";
	boolean whetherReject_tMSSqlRow_1 = false;
				conn_tMSSqlRow_1 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
			
		java.sql.Statement stmt_tMSSqlRow_1 = conn_tMSSqlRow_1.createStatement();
	

 



/**
 * [tMSSqlRow_1 begin ] stop
 */



	
	/**
	 * [tLogRow_2 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_2", false);
		start_Hash.put("tLogRow_2", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_2";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row2" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_2 = 0;
		
    	class BytesLimit65535_tLogRow_2{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_2().limitLog4jByte();

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_2 = "|";
		java.io.PrintStream consoleOut_tLogRow_2 = null;	

 		StringBuilder strBuffer_tLogRow_2 = null;
		int nb_line_tLogRow_2 = 0;
///////////////////////    			



 



/**
 * [tLogRow_2 begin ] stop
 */



	
	/**
	 * [tJavaRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJavaRow_1", false);
		start_Hash.put("tJavaRow_1", System.currentTimeMillis());
		
	
	currentComponent="tJavaRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row3" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tJavaRow_1 = 0;
		
    	class BytesLimit65535_tJavaRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJavaRow_1().limitLog4jByte();

int nb_line_tJavaRow_1 = 0;

 



/**
 * [tJavaRow_1 begin ] stop
 */



	
	/**
	 * [tLogRow_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tLogRow_1", false);
		start_Hash.put("tLogRow_1", System.currentTimeMillis());
		
	
	currentComponent="tLogRow_1";

	
			if (execStat) {
				if(resourceMap.get("inIterateVComp") == null){
					
						runStat.updateStatOnConnection("row1" + iterateId, 0, 0);
					
				}
			} 

		
		int tos_count_tLogRow_1 = 0;
		
    	class BytesLimit65535_tLogRow_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tLogRow_1().limitLog4jByte();

	///////////////////////
	
		final String OUTPUT_FIELD_SEPARATOR_tLogRow_1 = "|";
		java.io.PrintStream consoleOut_tLogRow_1 = null;	

 		StringBuilder strBuffer_tLogRow_1 = null;
		int nb_line_tLogRow_1 = 0;
///////////////////////    			



 



/**
 * [tLogRow_1 begin ] stop
 */



	
	/**
	 * [tMSSqlInput_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlInput_1", false);
		start_Hash.put("tMSSqlInput_1", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlInput_1";

	
		int tos_count_tMSSqlInput_1 = 0;
		
    	class BytesLimit65535_tMSSqlInput_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMSSqlInput_1().limitLog4jByte();
	
    
	
			org.talend.designer.components.util.mssql.MSSqlGenerateTimestampUtil mssqlGTU_tMSSqlInput_1 = org.talend.designer.components.util.mssql.MSSqlUtilFactory.getMSSqlGenerateTimestampUtil();
			
			java.util.List<String> talendToDBList_tMSSqlInput_1 = new java.util.ArrayList();
			String[] talendToDBArray_tMSSqlInput_1  = new String[]{"FLOAT","NUMERIC","NUMERIC IDENTITY","DECIMAL","DECIMAL IDENTITY","REAL"}; 
			java.util.Collections.addAll(talendToDBList_tMSSqlInput_1, talendToDBArray_tMSSqlInput_1); 
		    int nb_line_tMSSqlInput_1 = 0;
		    java.sql.Connection conn_tMSSqlInput_1 = null;
		        conn_tMSSqlInput_1 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
				
			String dbschema_tMSSqlInput_1 = (String)globalMap.get("dbschema_tMSSqlConnection_1");
		    
			java.sql.Statement stmt_tMSSqlInput_1 = conn_tMSSqlInput_1.createStatement();

		    String dbquery_tMSSqlInput_1 = "select job_name,data_checkpoint,time_checkpoint,next value for tstsz.dbo.etl_increment from tstsz.dbo.jobs_list where job_name = '" + context.target_job +"';";
			

            	globalMap.put("tMSSqlInput_1_QUERY",dbquery_tMSSqlInput_1);
		    java.sql.ResultSet rs_tMSSqlInput_1 = null;

		    try {
		    	rs_tMSSqlInput_1 = stmt_tMSSqlInput_1.executeQuery(dbquery_tMSSqlInput_1);
		    	java.sql.ResultSetMetaData rsmd_tMSSqlInput_1 = rs_tMSSqlInput_1.getMetaData();
		    	int colQtyInRs_tMSSqlInput_1 = rsmd_tMSSqlInput_1.getColumnCount();

		    String tmpContent_tMSSqlInput_1 = null;
		    
		    
		    while (rs_tMSSqlInput_1.next()) {
		        nb_line_tMSSqlInput_1++;
		        
							if(colQtyInRs_tMSSqlInput_1 < 1) {
								row1.job_name = null;
							} else {
	                         		
           		tmpContent_tMSSqlInput_1 = rs_tMSSqlInput_1.getString(1);
            if(tmpContent_tMSSqlInput_1 != null) {
            	if (talendToDBList_tMSSqlInput_1 .contains(rsmd_tMSSqlInput_1.getColumnTypeName(1).toUpperCase(java.util.Locale.ENGLISH))) {
            		row1.job_name = FormatterUtils.formatUnwithE(tmpContent_tMSSqlInput_1);
            	} else {
                	row1.job_name = tmpContent_tMSSqlInput_1;
                }
            } else {
                row1.job_name = null;
            }
		                    }
							if(colQtyInRs_tMSSqlInput_1 < 2) {
								row1.data_checkpoint = null;
							} else {
		                          
            if(rs_tMSSqlInput_1.getObject(2) != null) {
                row1.data_checkpoint = rs_tMSSqlInput_1.getLong(2);
            } else {
                    row1.data_checkpoint = null;
            }
		                    }
							if(colQtyInRs_tMSSqlInput_1 < 3) {
								row1.time_checkpoint = null;
							} else {
										
			row1.time_checkpoint = mssqlGTU_tMSSqlInput_1.getDate(rsmd_tMSSqlInput_1, rs_tMSSqlInput_1, 3);
			
		                    }
							if(colQtyInRs_tMSSqlInput_1 < 4) {
								row1.next_data_checkpoint = null;
							} else {
		                          
            if(rs_tMSSqlInput_1.getObject(4) != null) {
                row1.next_data_checkpoint = rs_tMSSqlInput_1.getLong(4);
            } else {
                    row1.next_data_checkpoint = null;
            }
		                    }
					





 



/**
 * [tMSSqlInput_1 begin ] stop
 */
	
	/**
	 * [tMSSqlInput_1 main ] start
	 */

	

	
	
	currentComponent="tMSSqlInput_1";

	

 


	tos_count_tMSSqlInput_1++;

/**
 * [tMSSqlInput_1 main ] stop
 */

	
	/**
	 * [tLogRow_1 main ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

			//row1
			//row1


			
				if(execStat){
					runStat.updateStatOnConnection("row1"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_1 = new StringBuilder();




   				
	    		if(row1.job_name != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.job_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.data_checkpoint != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.data_checkpoint)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.time_checkpoint != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
								FormatterUtils.format_Date(row1.time_checkpoint, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_1.append("|");
    			


   				
	    		if(row1.next_data_checkpoint != null) { //              
                    							
       
				strBuffer_tLogRow_1.append(
				                String.valueOf(row1.next_data_checkpoint)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_1 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_1 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_1);
                    }
                    consoleOut_tLogRow_1.println(strBuffer_tLogRow_1.toString());
                    consoleOut_tLogRow_1.flush();
                    nb_line_tLogRow_1++;
//////

//////                    
                    
///////////////////////    			

 
     row3 = row1;


	tos_count_tLogRow_1++;

/**
 * [tLogRow_1 main ] stop
 */

	
	/**
	 * [tJavaRow_1 main ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

			//row3
			//row3


			
				if(execStat){
					runStat.updateStatOnConnection("row3"+iterateId,1, 1);
				} 
			

		

    //Code generated according to input schema and output schema
row2.job_name = row3.job_name;
row2.data_checkpoint = row3.data_checkpoint;
row2.time_checkpoint = row3.time_checkpoint;
row2.next_data_checkpoint = row3.next_data_checkpoint;
context.this_checkpoint = Long.toString(row3.data_checkpoint + row2.next_data_checkpoint);

    nb_line_tJavaRow_1++;   

 


	tos_count_tJavaRow_1++;

/**
 * [tJavaRow_1 main ] stop
 */

	
	/**
	 * [tLogRow_2 main ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

			//row2
			//row2


			
				if(execStat){
					runStat.updateStatOnConnection("row2"+iterateId,1, 1);
				} 
			

		
///////////////////////		
						



				strBuffer_tLogRow_2 = new StringBuilder();




   				
	    		if(row2.job_name != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row2.job_name)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row2.data_checkpoint != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row2.data_checkpoint)							
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row2.time_checkpoint != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
								FormatterUtils.format_Date(row2.time_checkpoint, "yyyy-MM-dd")				
				);


							
	    		} //  			

    			strBuffer_tLogRow_2.append("|");
    			


   				
	    		if(row2.next_data_checkpoint != null) { //              
                    							
       
				strBuffer_tLogRow_2.append(
				                String.valueOf(row2.next_data_checkpoint)							
				);


							
	    		} //  			
 

                    if (globalMap.get("tLogRow_CONSOLE")!=null)
                    {
                    	consoleOut_tLogRow_2 = (java.io.PrintStream) globalMap.get("tLogRow_CONSOLE");
                    }
                    else
                    {
                    	consoleOut_tLogRow_2 = new java.io.PrintStream(new java.io.BufferedOutputStream(System.out));
                    	globalMap.put("tLogRow_CONSOLE",consoleOut_tLogRow_2);
                    }
                    consoleOut_tLogRow_2.println(strBuffer_tLogRow_2.toString());
                    consoleOut_tLogRow_2.flush();
                    nb_line_tLogRow_2++;
//////

//////                    
                    
///////////////////////    			

 
     row4 = row2;


	tos_count_tLogRow_2++;

/**
 * [tLogRow_2 main ] stop
 */

	
	/**
	 * [tMSSqlRow_1 main ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_1";

	

			//row4
			//row4


			
				if(execStat){
					runStat.updateStatOnConnection("row4"+iterateId,1, 1);
				} 
			

		

query_tMSSqlRow_1 = "UPDATE tstsz.dbo.jobs_list SET data_checkpoint =  " + context.this_checkpoint +
 " where job_name = '" + context.target_job +"';";
whetherReject_tMSSqlRow_1 = false;
globalMap.put("tMSSqlRow_1_QUERY",query_tMSSqlRow_1);
try {
		stmt_tMSSqlRow_1.execute(query_tMSSqlRow_1);
		
	} catch (java.lang.Exception e) {
		whetherReject_tMSSqlRow_1 = true;
		
				System.err.print(e.getMessage());
				
	}
	
	if(!whetherReject_tMSSqlRow_1) {
		
	}
	

 


	tos_count_tMSSqlRow_1++;

/**
 * [tMSSqlRow_1 main ] stop
 */












	
	/**
	 * [tMSSqlInput_1 end ] start
	 */

	

	
	
	currentComponent="tMSSqlInput_1";

	

	}
}finally{
	stmt_tMSSqlInput_1.close();

}
globalMap.put("tMSSqlInput_1_NB_LINE",nb_line_tMSSqlInput_1);

 

ok_Hash.put("tMSSqlInput_1", true);
end_Hash.put("tMSSqlInput_1", System.currentTimeMillis());




/**
 * [tMSSqlInput_1 end ] stop
 */

	
	/**
	 * [tLogRow_1 end ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	


//////
//////
globalMap.put("tLogRow_1_NB_LINE",nb_line_tLogRow_1);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row1"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_1", true);
end_Hash.put("tLogRow_1", System.currentTimeMillis());




/**
 * [tLogRow_1 end ] stop
 */

	
	/**
	 * [tJavaRow_1 end ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

globalMap.put("tJavaRow_1_NB_LINE",nb_line_tJavaRow_1);
			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row3"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tJavaRow_1", true);
end_Hash.put("tJavaRow_1", System.currentTimeMillis());




/**
 * [tJavaRow_1 end ] stop
 */

	
	/**
	 * [tLogRow_2 end ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	


//////
//////
globalMap.put("tLogRow_2_NB_LINE",nb_line_tLogRow_2);

///////////////////////    			

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row2"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tLogRow_2", true);
end_Hash.put("tLogRow_2", System.currentTimeMillis());




/**
 * [tLogRow_2 end ] stop
 */

	
	/**
	 * [tMSSqlRow_1 end ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_1";

	

	
	stmt_tMSSqlRow_1.close();	

			if(execStat){
				if(resourceMap.get("inIterateVComp") == null || !((Boolean)resourceMap.get("inIterateVComp"))){
			 		runStat.updateStatOnConnection("row4"+iterateId,2, 0); 
			 	}
			}
		
 

ok_Hash.put("tMSSqlRow_1", true);
end_Hash.put("tMSSqlRow_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk2", 0, "ok");
				}
				tMSSqlClose_1Process(globalMap);



/**
 * [tMSSqlRow_1 end ] stop
 */












				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlInput_1 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlInput_1";

	

 



/**
 * [tMSSqlInput_1 finally ] stop
 */

	
	/**
	 * [tLogRow_1 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_1";

	

 



/**
 * [tLogRow_1 finally ] stop
 */

	
	/**
	 * [tJavaRow_1 finally ] start
	 */

	

	
	
	currentComponent="tJavaRow_1";

	

 



/**
 * [tJavaRow_1 finally ] stop
 */

	
	/**
	 * [tLogRow_2 finally ] start
	 */

	

	
	
	currentComponent="tLogRow_2";

	

 



/**
 * [tLogRow_2 finally ] stop
 */

	
	/**
	 * [tMSSqlRow_1 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlRow_1";

	

 



/**
 * [tMSSqlRow_1 finally ] stop
 */












				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlInput_1_SUBPROCESS_STATE", 1);
	}
	

public void tMSSqlClose_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tMSSqlClose_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;



		


	
	/**
	 * [tMSSqlClose_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tMSSqlClose_1", false);
		start_Hash.put("tMSSqlClose_1", System.currentTimeMillis());
		
	
	currentComponent="tMSSqlClose_1";

	
		int tos_count_tMSSqlClose_1 = 0;
		
    	class BytesLimit65535_tMSSqlClose_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tMSSqlClose_1().limitLog4jByte();

 



/**
 * [tMSSqlClose_1 begin ] stop
 */
	
	/**
	 * [tMSSqlClose_1 main ] start
	 */

	

	
	
	currentComponent="tMSSqlClose_1";

	



	java.sql.Connection conn_tMSSqlClose_1 = (java.sql.Connection)globalMap.get("conn_tMSSqlConnection_1");
	if(conn_tMSSqlClose_1 != null && !conn_tMSSqlClose_1.isClosed())
	{
        conn_tMSSqlClose_1.close();
	}

 


	tos_count_tMSSqlClose_1++;

/**
 * [tMSSqlClose_1 main ] stop
 */
	
	/**
	 * [tMSSqlClose_1 end ] start
	 */

	

	
	
	currentComponent="tMSSqlClose_1";

	

 

ok_Hash.put("tMSSqlClose_1", true);
end_Hash.put("tMSSqlClose_1", System.currentTimeMillis());

				if(execStat){   
   	 				runStat.updateStatOnConnection("OnComponentOk3", 0, "ok");
				}
				tJava_1Process(globalMap);



/**
 * [tMSSqlClose_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tMSSqlClose_1 finally ] start
	 */

	

	
	
	currentComponent="tMSSqlClose_1";

	

 



/**
 * [tMSSqlClose_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tMSSqlClose_1_SUBPROCESS_STATE", 1);
	}
	

public void tJava_1Process(final java.util.Map<String, Object> globalMap) throws TalendException {
	globalMap.put("tJava_1_SUBPROCESS_STATE", 0);

 final boolean execStat = this.execStat;
	
		String iterateId = "";
	
	
	String currentComponent = "";
	java.util.Map<String, Object> resourceMap = new java.util.HashMap<String, Object>();

	try {

			String currentMethodName = new java.lang.Exception().getStackTrace()[0].getMethodName();
			boolean resumeIt = currentMethodName.equals(resumeEntryMethodName);
			if( resumeEntryMethodName == null || resumeIt || globalResumeTicket){//start the resume
				globalResumeTicket = true;





	
	/**
	 * [tJava_1 begin ] start
	 */

	

	
		
		ok_Hash.put("tJava_1", false);
		start_Hash.put("tJava_1", System.currentTimeMillis());
		
	
	currentComponent="tJava_1";

	
		int tos_count_tJava_1 = 0;
		
    	class BytesLimit65535_tJava_1{
    		public void limitLog4jByte() throws Exception{
    			
    		}
    	}
    	
        new BytesLimit65535_tJava_1().limitLog4jByte();


//System.out.println("UPDATE tstsz.dbo.jobs_list SET data_checkpoint = " + row4.data_checkpoint);	
Thread.sleep(9000);
System.out.println("@{checkpoint}@{" + context.this_checkpoint+"}");	
System.out.println("@{rows_inserted}@{129621}");	
System.out.println("@{rows_updated}@{16521}");	
System.out.println("@{rows_deleted}@{120000}");	
 



/**
 * [tJava_1 begin ] stop
 */
	
	/**
	 * [tJava_1 main ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 


	tos_count_tJava_1++;

/**
 * [tJava_1 main ] stop
 */
	
	/**
	 * [tJava_1 end ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 

ok_Hash.put("tJava_1", true);
end_Hash.put("tJava_1", System.currentTimeMillis());




/**
 * [tJava_1 end ] stop
 */
				}//end the resume

				



	
			}catch(java.lang.Exception e){	
				
				TalendException te = new TalendException(e, currentComponent, globalMap);
				
				throw te;
			}catch(java.lang.Error error){	
				
					runStat.stopThreadStat();
				
				throw error;
			}finally{
				
				try{
					
	
	/**
	 * [tJava_1 finally ] start
	 */

	

	
	
	currentComponent="tJava_1";

	

 



/**
 * [tJava_1 finally ] stop
 */
				}catch(java.lang.Exception e){	
					//ignore
				}catch(java.lang.Error error){
					//ignore
				}
				resourceMap = null;
			}
		

		globalMap.put("tJava_1_SUBPROCESS_STATE", 1);
	}
	
    public String resuming_logs_dir_path = null;
    public String resuming_checkpoint_path = null;
    public String parent_part_launcher = null;
    private String resumeEntryMethodName = null;
    private boolean globalResumeTicket = false;

    public boolean watch = false;
    // portStats is null, it means don't execute the statistics
    public Integer portStats = null;
    public int portTraces = 4334;
    public String clientHost;
    public String defaultClientHost = "localhost";
    public String contextStr = "Default";
    public boolean isDefaultContext = true;
    public String pid = "0";
    public String rootPid = null;
    public String fatherPid = null;
    public String fatherNode = null;
    public long startTime = 0;
    public boolean isChildJob = false;
    public String log4jLevel = "";

    private boolean execStat = true;

    private ThreadLocal<java.util.Map<String, String>> threadLocal = new ThreadLocal<java.util.Map<String, String>>() {
        protected java.util.Map<String, String> initialValue() {
            java.util.Map<String,String> threadRunResultMap = new java.util.HashMap<String, String>();
            threadRunResultMap.put("errorCode", null);
            threadRunResultMap.put("status", "");
            return threadRunResultMap;
        };
    };



    private PropertiesWithType context_param = new PropertiesWithType();
    public java.util.Map<String, Object> parentContextMap = new java.util.HashMap<String, Object>();

    public String status= "";

    public static void main(String[] args){
        final source_contacts source_contactsClass = new source_contacts();

        int exitCode = source_contactsClass.runJobInTOS(args);

        System.exit(exitCode);
    }


    public String[][] runJob(String[] args) {

        int exitCode = runJobInTOS(args);
        String[][] bufferValue = new String[][] { { Integer.toString(exitCode) } };

        return bufferValue;
    }

    public boolean hastBufferOutputComponent() {
		boolean hastBufferOutput = false;
    	
        return hastBufferOutput;
    }

    public int runJobInTOS(String[] args) {
	   	// reset status
	   	status = "";

        String lastStr = "";
        for (String arg : args) {
            if (arg.equalsIgnoreCase("--context_param")) {
                lastStr = arg;
            } else if (lastStr.equals("")) {
                evalParam(arg);
            } else {
                evalParam(lastStr + " " + arg);
                lastStr = "";
            }
        }


        if(clientHost == null) {
            clientHost = defaultClientHost;
        }

        if(pid == null || "0".equals(pid)) {
            pid = TalendString.getAsciiRandomString(6);
        }

        if (rootPid==null) {
            rootPid = pid;
        }
        if (fatherPid==null) {
            fatherPid = pid;
        }else{
            isChildJob = true;
        }

        if (portStats != null) {
            // portStats = -1; //for testing
            if (portStats < 0 || portStats > 65535) {
                // issue:10869, the portStats is invalid, so this client socket can't open
                System.err.println("The statistics socket port " + portStats + " is invalid.");
                execStat = false;
            }
        } else {
            execStat = false;
        }

        try {
            //call job/subjob with an existing context, like: --context=production. if without this parameter, there will use the default context instead.
            java.io.InputStream inContext = source_contacts.class.getClassLoader().getResourceAsStream("local_project/source_contacts_0_1/contexts/"+contextStr+".properties");
            if(isDefaultContext && inContext ==null) {

            } else {
                if (inContext!=null) {
                    //defaultProps is in order to keep the original context value
                    defaultProps.load(inContext);
                    inContext.close();
                    context = new ContextProperties(defaultProps);
                }else{
                    //print info and job continue to run, for case: context_param is not empty.
                    System.err.println("Could not find the context " + contextStr);
                }
            }

            if(!context_param.isEmpty()) {
                context.putAll(context_param);
				//set types for params from parentJobs
				for (Object key: context_param.keySet()){
					String context_key = key.toString();
					String context_type = context_param.getContextType(context_key);
					context.setContextType(context_key, context_type);

				}
            }
				    context.setContextType("target_job", "id_String");
				
                context.target_job=(String) context.getProperty("target_job");
				    context.setContextType("this_checkpoint", "id_String");
				
                context.this_checkpoint=(String) context.getProperty("this_checkpoint");
				    context.setContextType("job_schedule_type", "id_String");
				
                context.job_schedule_type=(String) context.getProperty("job_schedule_type");
        } catch (java.io.IOException ie) {
            System.err.println("Could not load context "+contextStr);
            ie.printStackTrace();
        }


        // get context value from parent directly
        if (parentContextMap != null && !parentContextMap.isEmpty()) {if (parentContextMap.containsKey("target_job")) {
                context.target_job = (String) parentContextMap.get("target_job");
            }if (parentContextMap.containsKey("this_checkpoint")) {
                context.this_checkpoint = (String) parentContextMap.get("this_checkpoint");
            }if (parentContextMap.containsKey("job_schedule_type")) {
                context.job_schedule_type = (String) parentContextMap.get("job_schedule_type");
            }
        }

        //Resume: init the resumeUtil
        resumeEntryMethodName = ResumeUtil.getResumeEntryMethodName(resuming_checkpoint_path);
        resumeUtil = new ResumeUtil(resuming_logs_dir_path, isChildJob, rootPid);
        resumeUtil.initCommonInfo(pid, rootPid, fatherPid, projectName, jobName, contextStr, jobVersion);

		List<String> parametersToEncrypt = new java.util.ArrayList<String>();
        //Resume: jobStart
        resumeUtil.addLog("JOB_STARTED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","","","",resumeUtil.convertToJsonText(context,parametersToEncrypt));

if(execStat) {
    try {
        runStat.openSocket(!isChildJob);
        runStat.setAllPID(rootPid, fatherPid, pid, jobName);
        runStat.startThreadStat(clientHost, portStats);
        runStat.updateStatOnJob(RunStat.JOBSTART, fatherNode);
    } catch (java.io.IOException ioException) {
        ioException.printStackTrace();
    }
}



	
	    java.util.concurrent.ConcurrentHashMap<Object, Object> concurrentHashMap = new java.util.concurrent.ConcurrentHashMap<Object, Object>();
	    globalMap.put("concurrentHashMap", concurrentHashMap);
	

    long startUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
    long endUsedMemory = 0;
    long end = 0;

    startTime = System.currentTimeMillis();




this.globalResumeTicket = true;//to run tPreJob




this.globalResumeTicket = false;//to run others jobs

try {
errorCode = null;tMSSqlConnection_1Process(globalMap);
if(!"failure".equals(status)) { status = "end"; }
}catch (TalendException e_tMSSqlConnection_1) {
globalMap.put("tMSSqlConnection_1_SUBPROCESS_STATE", -1);

e_tMSSqlConnection_1.printStackTrace();

}

this.globalResumeTicket = true;//to run tPostJob




        end = System.currentTimeMillis();

        if (watch) {
            System.out.println((end-startTime)+" milliseconds");
        }

        endUsedMemory = Runtime.getRuntime().totalMemory() - Runtime.getRuntime().freeMemory();
        if (false) {
            System.out.println((endUsedMemory - startUsedMemory) + " bytes memory increase when running : source_contacts");
        }





if (execStat) {
    runStat.updateStatOnJob(RunStat.JOBEND, fatherNode);
    runStat.stopThreadStat();
}
    int returnCode = 0;
    if(errorCode == null) {
         returnCode = status != null && status.equals("failure") ? 1 : 0;
    } else {
         returnCode = errorCode.intValue();
    }
    resumeUtil.addLog("JOB_ENDED", "JOB:" + jobName, parent_part_launcher, Thread.currentThread().getId() + "", "","" + returnCode,"","","");

    return returnCode;

  }

    // only for OSGi env
    public void destroy() {
    closeSqlDbConnections();


    }



    private void closeSqlDbConnections() {
        try {
            Object obj_conn;
            obj_conn = globalMap.remove("conn_tMSSqlConnection_1");
            if (null != obj_conn) {
                ((java.sql.Connection) obj_conn).close();
            }
        } catch (java.lang.Exception e) {
        }
    }











    private java.util.Map<String, Object> getSharedConnections4REST() {
        java.util.Map<String, Object> connections = new java.util.HashMap<String, Object>();
            connections.put("conn_tMSSqlConnection_1", globalMap.get("conn_tMSSqlConnection_1"));







        return connections;
    }

    private void evalParam(String arg) {
        if (arg.startsWith("--resuming_logs_dir_path")) {
            resuming_logs_dir_path = arg.substring(25);
        } else if (arg.startsWith("--resuming_checkpoint_path")) {
            resuming_checkpoint_path = arg.substring(27);
        } else if (arg.startsWith("--parent_part_launcher")) {
            parent_part_launcher = arg.substring(23);
        } else if (arg.startsWith("--watch")) {
            watch = true;
        } else if (arg.startsWith("--stat_port=")) {
            String portStatsStr = arg.substring(12);
            if (portStatsStr != null && !portStatsStr.equals("null")) {
                portStats = Integer.parseInt(portStatsStr);
            }
        } else if (arg.startsWith("--trace_port=")) {
            portTraces = Integer.parseInt(arg.substring(13));
        } else if (arg.startsWith("--client_host=")) {
            clientHost = arg.substring(14);
        } else if (arg.startsWith("--context=")) {
            contextStr = arg.substring(10);
            isDefaultContext = false;
        } else if (arg.startsWith("--father_pid=")) {
            fatherPid = arg.substring(13);
        } else if (arg.startsWith("--root_pid=")) {
            rootPid = arg.substring(11);
        } else if (arg.startsWith("--father_node=")) {
            fatherNode = arg.substring(14);
        } else if (arg.startsWith("--pid=")) {
            pid = arg.substring(6);
        } else if (arg.startsWith("--context_type")) {
            String keyValue = arg.substring(15);
			int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.setContextType(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.setContextType(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }

            }

		} else if (arg.startsWith("--context_param")) {
            String keyValue = arg.substring(16);
            int index = -1;
            if (keyValue != null && (index = keyValue.indexOf('=')) > -1) {
                if (fatherPid==null) {
                    context_param.put(keyValue.substring(0, index), replaceEscapeChars(keyValue.substring(index + 1)));
                } else { // the subjob won't escape the especial chars
                    context_param.put(keyValue.substring(0, index), keyValue.substring(index + 1) );
                }
            }
        }else if (arg.startsWith("--log4jLevel=")) {
            log4jLevel = arg.substring(13);
		}

    }
    
    private static final String NULL_VALUE_EXPRESSION_IN_COMMAND_STRING_FOR_CHILD_JOB_ONLY = "<TALEND_NULL>";

    private final String[][] escapeChars = {
        {"\\\\","\\"},{"\\n","\n"},{"\\'","\'"},{"\\r","\r"},
        {"\\f","\f"},{"\\b","\b"},{"\\t","\t"}
        };
    private String replaceEscapeChars (String keyValue) {

		if (keyValue == null || ("").equals(keyValue.trim())) {
			return keyValue;
		}

		StringBuilder result = new StringBuilder();
		int currIndex = 0;
		while (currIndex < keyValue.length()) {
			int index = -1;
			// judege if the left string includes escape chars
			for (String[] strArray : escapeChars) {
				index = keyValue.indexOf(strArray[0],currIndex);
				if (index>=0) {

					result.append(keyValue.substring(currIndex, index + strArray[0].length()).replace(strArray[0], strArray[1]));
					currIndex = index + strArray[0].length();
					break;
				}
			}
			// if the left string doesn't include escape chars, append the left into the result
			if (index < 0) {
				result.append(keyValue.substring(currIndex));
				currIndex = currIndex + keyValue.length();
			}
		}

		return result.toString();
    }

    public Integer getErrorCode() {
        return errorCode;
    }


    public String getStatus() {
        return status;
    }

    ResumeUtil resumeUtil = null;
}
/************************************************************************************************
 *     76133 characters generated by Talend Open Studio for Big Data 
 *     on the March 27, 2018 12:38:59 AM EEST
 ************************************************************************************************/